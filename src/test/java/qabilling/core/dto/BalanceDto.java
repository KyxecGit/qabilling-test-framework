package qabilling.core.dto;

import java.util.Locale;
import java.util.Objects;

/**
 * üí∞ DTO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
 * 
 * ‚úÖ FIX: –î–æ–±–∞–≤–ª–µ–Ω—ã equals() –∏ hashCode() –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
public class BalanceDto extends BaseDto {
    
    /** –°—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π) */
    private final double amount;
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BalanceDto
     * 
     * @param amount —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0)
     */
    public BalanceDto(double amount) {
        this.amount = amount;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç Builder –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è BalanceDto
     * 
     * @return –Ω–æ–≤—ã–π Builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * Builder –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BalanceDto
     */
    public static class Builder {
        private double amount;
        
        /** –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞ */
        public Builder amount(double amount) {
            this.amount = amount;
            return this;
        }
        
        /** –°–æ–∑–¥–∞–µ—Ç BalanceDto —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π */
        public BalanceDto build() {
            return new BalanceDto(amount);
        }
    }
    
    @Override
    public String toJson() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º US –ª–æ–∫–∞–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∏—Å–µ–ª (—Å —Ç–æ—á–∫–æ–π, –∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π)
        return String.format(Locale.US, "{\"amount\": %.2f}", amount);
    }
    
    /** –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—É–º–º—ã */
    public double getAmount() { 
        return amount; 
    }
    
    /**
     * –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ DTO —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
     * –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
     * 
     * @param negativeAmount –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
     * @return BalanceDto —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    public static BalanceDto createInvalidWithNegativeAmount(double negativeAmount) {
        return new BalanceDto(negativeAmount);
    }
    
    /**
     * –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ DTO —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º–æ–π
     * –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
     * 
     * @return BalanceDto —Å –≤–∞–ª–∏–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º–æ–π –æ—Ç 10.00 –¥–æ 1000.00
     */
    public static BalanceDto createValidRandom() {
        double randomAmount = 10.0 + (Math.random() * 990.0);
        return new BalanceDto(Math.round(randomAmount * 100.0) / 100.0); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    }
    
    // ‚úÖ equals() –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Balance –æ–±—ä–µ–∫—Ç–æ–≤
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BalanceDto)) return false;
        BalanceDto that = (BalanceDto) o;
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—É–º–º—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å double)
        return Math.abs(amount - that.amount) < 0.01;
    }
    
    // ‚úÖ hashCode() –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HashSet/HashMap
    @Override
    public int hashCode() {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º double –≤ long –¥–ª—è —Ö–µ—à–∞
        return Objects.hash(Math.round(amount * 100.0));
    }
}
